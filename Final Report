


CMPE / SE / ISE 494 Senior Project Report


AUTISM SUPPORT PLATFORM - OtizART



Team Members: Öner Nemutlu, Nebi Osman Ünal, Kuzeyhan Savaş, Doruk Bulut



Course Coordinator	: Cansu Çiğdem Ekin
Supervisor		: Bilge Say








Jan. 13, 2019


Abstract

	The purpose of this project is to provide technical documentation of OtizART project which is a support platform for Autism Spectrum Disorders. This document developed under the supervision of Bilge Say, Ph.D. Professor of Software Engineering. The system was developed by a project team of 4 people. In this document there are information about following questions; purpose of the system, the target mass of the system, and so on. In addition, the project was developed with feedbacks from people with expertise in the subject. As a result, according to our interviews and research, the general needs of the system, the individuals and families were affected by the Autism Spectrum Disorders which functionalities should be taken. In the system, different mechanisms can be seen. In addition, a literature review has been done to get information about to understand problems and missing aspects in this area, the reasons behind those, and findings of this research has been used during development to avoid the same mistakes and deal with the problems. To provide further information, additional research has been done on communication issues that is encountered during development. As a result of these researches, we decided PHP Laravel was the best development environment to meet the needs of the project.
Keywords: Autism Spectrum Disorders, PHP Laravel, Autism Support Platform, Donation Management Software, Art for Special Education.










Acknowledgements

I would like to express my deepest appreciation to all those who provided me the possibility to complete this project;
Dr. Ersin Ufuk Timuçin, Education Coordinator of “Ilgi Otizm Derneği”,
Nilüfer Ertem, Specialist at KOSGEB and mother of an ASD Child,
Asiye Demirörs, Art teacher for special needs education of school for children with autism.
Also,
A special gratitude I give to our senior project supervisor;
Dr. Bilge Say, Academic Member of Atilim University Softare Engineering Department.

















Table of Contents

Abstract	2
Keywords:	2
Acknowledgements	3
List of Figures	7
List of Tables	10
1.	Introduction	11
2.	Literature Review	13
    2.1  Problems in Support Platform Systems…………………………………………………………………………………..16
2.2  Problems in Support Platform Systems	16
2.2.1 Speed and Performance Problems	16
2.2.2 Problems Related to System Complexity	17
2.2.3 Usability and Design Issue	17
2.2.4 Privacy & Security Concerns	17
2.3. Focus of Study: Human-Computer Interaction	18
2.4 Technical Background of the Study	18
3. Requirements……………………………………………………………………………………………………………………………….19
3.1	Overall Description of the Project	19
3.1.1 Product Perspective	19
3.1.2 Product Functions	21
3.1.3 User Characteristics	21
    3.1.4 Constraints	22
3.1.5	Assumptions and Dependencies	22
3.2	Specific Requirements	23
3.2.1 External Interface Requirements	23
3.2.1.1 User Interfaces	23
3.2.1.2 Hardware Interfaces	23
3.2.1.3 Software Interfaces	23
3.2.1.4 Communication Interface	24
3.2.2 Functional Requirements	24
3.2.2.1 User Management	24
3.2.2.2 Order Management	25
3.2.2.3 Products Management	25
3.2.2.4 Activity Management	26
3.2.2.5 Donation Management	26
3.2.2.6 Approval Management	27
3.2.3 Non-Functional Requirements	27
3.2.3.1 Performance Requirements	27
3.2.3.2 Security Requirements	27
3.2.3.3 Availability	28
3.2.3.4 Usability	28
3.2.3.5 Database Requirements	28
4.Design	29
4.1 Software Methodology	29
4.2 System Architecture Diagram	30
4.3 Collaboration Diagrams	31
4.3.1 Users Registration	31
4.3.2 Users Login	32
4.3.3 Buy Product	33
4.3.4 Add Product	34
4.3.5 Donation	35
4.3.6 NGO Add Activity	36
4.3.7 NGO Delete Activity	37
4.3.8 NGO Update Activity	38
4.4 Deployment Diagram	39
4.5 Class Diagram	40
4.6 User Interface Designs…………………………………………………………………………………………………………….41  
4.6.1 Main Page of the OtizART	42
4.6.2 Registration Page of the OtizArt	45
4.6.3 Registration Page for Standard and Private User	47
4.6.4 Login Page for All Users and Visitors…………………………………………………………………………………48
4.6.5 Products Page ………………………………………………………………………………………………………………….49
4.6.6 Add, Delete and Update Product for Private Users and NGO	50
4.6.7 Activities	53
4.6.8 Payment Page	54
4.6.9 Donation Packages	56
4.6.10 Time Based Donation Packages	59
4.6.11 About Us Page	60
4.6.12 Contact Page	62
4.6.13 Help & Support Page and User Manuals	63
5.	Implementation and Testing	67
5.1	Implementation	67
5.2	Test	81
5.2.1	Test Plan	81
5.2.2	Test Procedures	85
6.	Evaluation	99
7.	Impact of the Project & Compliance with the Constraints	101
7.1	Compliance with the Realistic Constraints	101
7.2	Impact of the Project	102
8.	Conclusion	105
9.	Appendices	106
9.1	Appendix 1 Interview with Nilüfer Ertem, Specialist at KOSGEB and Mother of an ASD Child:	106
9.2	Appendix 2 Interview with Ufuk Timuçin, Coordinator of İlgi Autism Foundation:	107
10.	References	108











List of Figures

Figure 1: Donations of that Platform	13
Figure 2: Donation System of that Platform	14
Figure 3: Donation Example of That Platform	14
Figure 4: Time Based Donation Example	15
Figure 5: Donation Platrom on Tohum Autism Foundation……………………………….…16 
Figure 6: Use Case Diagram.....................................................................................................20
Figure 7: ER Diagram…………………………………………………………………….…..28
Figure 8: System Architecture Diagram………………………………………………..….…30
Figure 9: Users Registration Collaboration Diagram………………………………….……..31
Figure 10: Users Login Collaboration Diagram…………………………………….………..32
Figure 11: Buy Product Collaboration Diagram…………………………………….………..33
Figure 12: Add Product Collaboration Diagram	34
Figure 13: Donation Collaboration Diagram	35
Figure 14: NGO Add Activity Collaboration Diagram	36
Figure 15: NGO Delete Activity Collaboration Diagram	37
Figure 16: NGO Update Activity Collaboration Diagram	38
Figure 17: Deployment Diagram	39
Figure 18: Class Diagram	40
Figure 19: OtizArt Main Page 1	41
Figure 20: OtizArt Main Page 2	42
Figure 21: OtizArt Main Page 3	42
Figure 22: OtizArt Main Page 4	43
Figure 23: OtizArt Main Page 5	44
Figure 24: OtizArt Registration Page for All Users	45
Figure 25: OtizArt Registration Page for All Users 2	45
Figure 26: OtizArt Registration Page All User Details	46
Figure 27: OtizArt Standard User Registration Page	47
Figure 28: OtizArt Private User Registration Page	47
Figure 29: OtizArt NGO User Registration Page.....................................................................48
Figure 30: OtizArt Login Page……………………………………………………….……….48
Figure 31: OtizArt Products Page	49
Figure 32: OtizArt Delete-Update Prodcut Page	50
Figure 33: OtizArt Management Panel for Adding Product	51
Figure 34: OtizArt Management Panel	51
Figure 35: OtizArt Product Form/Product Details	52
Figure 36: OtizArt Product Form Request to Administration	52
Figure 37: OtizArt Activities Page	53
Figure 38: OtizArt Activities Form……………………….…………………………………..53
Figure 39: OtizArt Payment Page 1	54
Figure 40: OtizArt Payment Page 2	54
Figure 41: OtizArt Payment Page/ Success Page	55
Figure 42: OtizArt Donations Page	56
Figure 43: OtizArt Donation Package#1…………….………………………………………..56
Figure 44: OtizArt Donation Package#2	57
Figure 45: OtizArt Donation Package#3	57
Figure 46: OtizArt Donation Package#4	58
Figure 47: OtizArt Time Based Donation Package…………….…………………………….59
Figure 48: OtizArt Time Based Donation Package Details ……….…………………………59
Figure 49: OtizArt About Us Page 1…………….……………….………….………………..60
Figure 50: OtizArt About Us Page 2……….…………………….………….………………..61
Figure 51: OtizArt Contact Page…….……………………….…………….…………………62
Figure 52: OtizArt Help & Support Page 1……….…………………………………………..63
Figure 53: OtizArt Help & Support Page 2….………………………………………………..63
Figure 54: OtizArt User Manuels Section……….……………………………………………64
Figure 55: OtizArt Products User Manuel…….……………………………………………...64
Figure 56: OtizArt Donations User Manuel………….……………………………………….65
Figure 57: OtizArt Donations User Manuel………….……………………………………….65
Figure 58: OtizArt Registration and Login User Manuel…………...………………………..66
Figure 59: XAMPP Control Panel…………..……………………..…………………………67
Figure 60: FlowChart of Login and Registration Page….……...…………………………….69
Figure 61: FlowChart of Product Page…………………….…………………………………74
Figure 62: FlowChart of Activities Page…………….……………………………………….76
Figure 63: FlowChart of Donation Packages…….…………………………………………..78























List of Tables

Table 5.2.1: Identification of tests…………………………………………………………………….82
Table 5.2.2: Test Schedule…………………………………………………………………….………83
Table 7.1: Realistic Constraints & Conditions……………………………………………………….101
Table 7.2: Impact Assesment Report…………………………………………………………………102





















1.	Introduction

In today’s world, Autism Spectrum Disorder is a complex neurodevelopmental disorder that is congenital, occurring in the first three years of life. The cause of autism has not yet been determined. However, research has shown that autism is a genetic basis. Also, there are some views that environmental conditions are effective on autism.[1]
In the last 30 years, the thoughts about autism have changed dramatically. Although autism is a rare developmental disorder 30 years ago, now it is the most common developmental disorder. There is no medical treatment for autism for which there is no definite cause. The most successful method among the methods applied to individuals with autism in special education.
Today, with the increase in the number of individuals with autism, there are dozens of different applications for individuals with autism. In particular, families who have recently received a diagnosis of autism are surprised by this diversity in their research on the Internet and in desperation they resort to each of the alternatives they can try. However, deciding on an alternative means investing time, energy and money into that practice. 
Findings of studies conducted before the 1970s showed that children with autism had severe mental/behavioral disabilities and that the practices had little effect on these children. However, significant advances have been made in autistic education practices since the 1970s. From the past to the present, comprehensive practice, supported by the highest number of scientific research, among the practices aimed at individuals with autism, is early intensive behavioral education. It is seen that individuals with autism who make the most of the applications are at the earliest age. Early age children receive intensive (20-40 hours per week) behavioral training, significantly increasing their level of functioning. In addition, the implementation of these practices at home rather than the institution, interfering with all living areas of the child, increasing the knowledge and skills of the family and using all time efficiently increase the contribution of the application. 
Due to the fact that important research supports are available, the proposed early intensive behavioral training is a very expensive practice for the family because it requires teamwork and is intense. Unfortunately, the educational support provided by the state for children with 

autism is far from meeting the necessary intensive training. Therefore, very few autism children can benefit from these applications. NGOs and academics working in the field of autism strive to provide state support through a variety of projects and awareness studies to ensure that all children with autism benefit from early intensive behavioral education. 
Therefore, in this project, we have established the OtizART Support Platform to provide children with autism with material and moral support to enable them to receive necessary and adequate training through early diagnosis. Through this platform, the artistic works which children have made can be offered for sale and these works can be purchased by volunteers. At the same time, NGOs can initiate a donation campaign through the system in line with their needs. In this way, both children and their families and also NGOs can find support on this system.

















2.	Literature Review

In this project we want to make a new help platform for Autism Spectrum Disorders patients. Our aims we provide a more effective platform to support for their daily life. The first procedure was various interviews. We talked to relevant NGOs and families living this situation. We researched about similar websites, system and analysis about the effectiveness of these platforms. Actually, there is no exactly similar system like OtizART. While we started the project, our aim was to develop a support platform for every user types. We also got opinions and thoughts about the solution of this problem from people, who knows and related with that subject. In this section, we showed that differences between our project and other projects.
2.1	Comparison with Other Platforms
There are not many examples of our project, but a system is quite similar to our goal. This system name is “www.otsimo.com”. This platform is made by Hasan Zafer Elcik, Sercan Değirmenci, and other Otsimo co-workers. Firstly, this project was an initiative of startup. According to Hasan Zafer Elcik (Co-founder of Otsimo), “They decided to create a color game to teach his brother colors. His brother learned the colors in a very short time. Her brother's success in the game inspired them to produce new games for every child who could benefit from them. They created Otsimo, the mobile education platform for special children.”.[2] Although OtizART and Otsimo aim to support families with autism , they differ in terms of development, implementation and functionality.
Second system is “www.losev.org.tr” which can help for leukemia patients. “LÖSEV” platform was developed by “Pikare Yazılım Ve İnternet Hizmetleri”. [3] This system is similar to our project in terms of donations and activity announcements.
 Figure 1 : Donations of that Platform


In this figure 1, we have a system similar to our donation system. 
 
Figure 2 : Donation System of that Platform
In this figure 2, we see a similar functionalities of the activities in our project.
Third system is “www.kizilay.org.tr”, the purpose of this platform is to provide assistance to those in need in the event of a natural disaster or any adverse event. This platform is developed by the government. [4] In this figure, we see the donation system on the “www.kizilay.org.tr” platform.
 
Figure 3 : Donation Example of That Platform


Fourth system is “arikovani.com”, the purpose of this platform is a mass funding platform that enables entrepreneurs to acquire the resources they need from the society for the implementation of technology and innovation-oriented projects. [5] In terms of similarity, the suitability of our project is to help people through mutual aid. In this figure, we see the donation system on the “arikovani.com” platform.
 
Figure 4 : Time Based Donation Example

Fifth system is “tohumotizm.org”, Tohum Turkey Autism Early Diagnosis and Education Foundation, 'autism spectrum disorder' that children be placed early diagnosis, the integration into the society with special education and the purpose of dissemination throughout the country that was founded on April 15, 2003. Tohum autism foundation, by carrying out projects in the years of activity, has contributed to meet the needs of individuals and their families with autism. Both OtizART platform and “Tohum Autism Foundation”, the donation system has the same purpose in terms of function, in Figure 5. [6] The aim in our system is to help all NGOs gather under a single roof and get support. 



 
Figure 5 : Donation Platrom on Tohum Autism Foundation

2.2  Problems in Support Platform Systems
2.2.1 Speed and Performance Problems 

Speed and performance are very important in many systems. These factors determine the quality of the system. Speed and performance are a decisive factor, especially on websites. According to today's condition, sites have a specific response time. For example, the transition between pages should be too short. General e-commerce sites have some transaction periods. Our aim is to stay within these periods. In this way, the system achieves its most important purpose.
 2.2.2 Problems Related to System Complexity

A complex system is a system of many components that can interact with each other. One of the factors that cause system complexity is that the system has too many parameters. The reason for the complexity of the system is the size of the system, the content of the elements, the different authorization of the different types of users, the versatility of the system contents, and the ability to remain safe while performing these operations. 

Our project is aimed at Autism Spectrum Disorder patients and relatives. The primary purpose is to present them with a system that helps to make the support process easier. The presence of a complex system causes both the user and the developer to fail.
2.2.3 Usability and Design Issue

Usability means the ease of access and/or use of a system. A design can not be used on its own. Usability is the ease of use and learnability of a human-made object such as a tool or device. In software engineering, usability is the degree to which a software can be used by specified consumers to achieve quantified objectives with effectiveness, efficiency, and satisfaction in a quantified context of use. 
Usability and design for our project was one of the most important factors. Because we had to make sure that the users who would use this system would perform the function they wanted without losing the design complexity. It should be easy for the user to become familiar with and competent in using the user interface during the first contact with the system. We also needed to pay attention to ethical values when designing this system. With both visual richness and guiding information, we have optimized the usability and design level.
2.2.4 Privacy & Security Concerns

It is inevitable that broad usage of e-commerce and management systems to bring up concerns about security and privacy regarding the stored data. Such concerns include frequency and costs associated with identity theft and the owners and authorized persons to access data i.e. who owns the data and who can access to it. 
For OtizART project, one of the most important factors is security and confidentiality. Confidentiality and keeping secure of confidential information, their validation and integrity of the information is one of the important functionality of the system. In considering this system, it is designed with 3 important components of CIA model: confidentiality, integrity and availability. [7]

2.3. Focus of Study: Human-Computer Interaction

HCI (Human-Computer Interaction) is a field that provides systematic and detailed descriptions about the interactions between the users and the systems. The aim of HCI is to found a psychological approach to understand software design and the use of computer systems, and also to guide developers in considering human factors to improve design (Byte Magazine, 1997). [8]
Usability, being an important element of HCI, is defined as the capability to be used by humans easily and effectively. A major resolution of usability is development of software are based on understanding of user requirements. What makes usability an important factor for software project is that attention given to user experience and resources allocated for the user interface design play an important role for the determination of the project’s success.
In OtizART project, human and computer interaction is very important because of the targeted audience. The interface used should be simpler and more understandable than other e-commerce sites. It should also include routing and help functions in place. Having children and their families with autism in a platform with their own works and selling these works. NGOs can find support for their projects. The system is intended to be useful for both families, NGOs and donors.
2.4 Technical Background of the Study

In this section of the literature review, preferred e-commerce platforms and support platforms are described. 
The OtizART system is designed to be accessible from all environments such as mobiles, PCs, tablets, Android, IOS, Windows, Linux, regardless of the environment. In today's conditions, the density of people who have access to the internet is increasing. In this way, people and families affected by ASD can be much easier to reach than before. We have provided the opportunity to find volunteers for those who need help using this power. 



3.Requirements
3.1	Overall Description of the Project

3.1.1 Product Perspective

The main goal of OtizART is supporting the families who have child or children with autism spectrum disorders and NGOs that have students with autism spectrum disorders. OtizART runs on web. The art products which made by children can be sold on that website. Also, there is a donation option for people and finally there is an activity calendar. Each user type has authorizations as required by their roles. The system consists of 4 user types. There user types are Standard User, Private User, NGO user and Admin. Users can perform their authorization after registration. Standard users are users that we call donors. These users can purchase the work on the platform. They can make donations to the NGO they wish to donate and get information about the activities created by NGOs. Private users are the type of user we describe as children and families with autism. This type of user can exhibit and sell his / her work. NGO is the type of user who can create and publicize donation campaign activities and they can sell products. Admin is the most authorized user of the site. When a new account is created or a product is created, user information or product is updated, Admin user who has reviewed and approved these process. Also creates donation packages in the system. Use case diagram, in Figure 5 explains the details of mechanism from user perspective.








 
Figure 6 : Use Case Diagram

3.1.2 Product Functions 

A.	SalesArtProducts
-	In this function; art products of children with autism can be sold to other standard users and NGO (as Registered Non Governmental Organizations).


B.	CreationActivity
-	In this function; The activities added by NGO will be created on the activities page for all users of the OtizART System.
C.	ProvisionsDonationOptions
-	In this function; there are several types of donation package options in the system. By selecting one or more of these packages, users can make donations to the NGO they want or the event organized by that organization.
D.	ConnectionBetweenChildrenandNGOs
-	In this function; with the OtizART system, families can find financial and mental support for their children by contacting the relevant NGO. NGOs help to sell the product of the child who is educated in NGO.
3.1.3	User Characteristics
Admin: Admin type user’s main task is to control the system. Admin has the authority to approve the registration for new registry. Thus, bringing a restriction to security during registration. The confirmation of uploaded photos are controlled by Admin. Admin can Access the database. Admin has authorizations such as insert, update, remove on database. Activity calendar is controlled by admin.
Private User: Private user is for the family who has child or children with autism. The reason of this, only the family can upload the Picture of the product. Private users’ can see the activities. Therefore we need that type of user. The information of the private users should be kept to confirm that the users of the system are correct and real persons.
Standart User: Standard users are users that we call donors. These users can purchase the work on the platform. They can make donations to the NGO they wish to donate and get information about the activities created by NGOs. Standart user can buy a product for supporting the family also standart users can be donor. 
NGO: That type of user also can be a benefactor. Only the NGOs can get that type of user. The NGO can sell their art products to provide income. This type of user has an authority to organize activity on activity page. These are basically what the NGO user can do. NGO also creates purposeful donation packages, which can provide a specific target donation collection over a period of time. They can also collect donations from fixed packages.

Visitor: This user type can only views activities and product on the website. Visitor cannot participate in any action.
3.1.4	Constraints

A.	The system shall use the current corporate standard MySQL Database Engine.
B.	The system has formed platfrom in mysql database supported by PhpMyAdmin.
C.	All HTML, PHP (Laravel Framework), JavaScripts and CSS codes shall conform to the HTML 5.0 standard.
D.	The sales function will be ready for the API, but a real payment system is not currently in the system. Because, the products should be in accordance with the ethical rules. This requires admin approval.
3.1.5	Assumptions and Dependencies

A.	The website should always serve. Operation of the website depends on the server and hosting. 
B.	Being a private user and upload photos containing art product depends on admin approval. 
C.	Another assumption is, website must be mobile friendly. So, that means the web page has to be smooth when you want to use mobile platform instead of desktop platform. The layout of the page and the buttons should not be distorded.








3.2	Specific Requirements
This part is a section that contains all the features of the system in detail.It gives a description of the functional and quality requirements of the system.
3.2.1. External Interface Requirements
3.2.1.1. User Interfaces

1. The system should provide a help link from any HTML page displayed to explain how to use this page.
2. The Web pages should permit complete navigation and product or activity selection using the keyboard alone, in addition to using mouse and keyboard combinations.
3. The system should direct the corresponding admin approval to check the various documents if the system wants to register an official NGO.
3.2.1.2. Hardware Interfaces
Hardware interfaces are not defined.
 3.2.1.3 Software Interfaces

1. OtizArt System should send the orders from the program interface to the product system. 
	2. System should check with the admin approval if the product is suitable for sale.
3. The system should update the status of a sold product and should change the stock information.
4. The OtizArt system should communicate with payment system through a programmatic interface.



3.2.1.4 Communication Interface

	1. The OtizArt System should answer users’ requests. 
2. The OtizArt system shall send an e-mail message to the Admin to confirm acceptance of product, membership and delivery products.
3. The OtizArt system shall send an e-mail message to the Admin to report any problems with the product order or delivery after the order is accepted.
3.2.2. Functional Requirements 

3.2.2.1. User Management

FR1: The system must allow users can sign in.
FR2: The system must allow users can log in.
FR3: The system must allow users can log out.
FR4: The system must allow to send standard users' request to be private user to admin approval.
FR5: The system must allow NGOs can sign in.
FR6: The system must allow NGOs can log in.
FR7: The system must allow NGOs can log out.
FR8: The system must allow to send NGOs’ request to be NGO account to admin approval.
FR9: The system should allow standard and private users to update their information.
FR10: The system must only allow admin to update user types.
FR11: The system must allow to NGOs and admin to update NGO informations.
FR12: The system must allow to delete user only for admin.
FR13: The system should view navigation bar.
FR14: The system must view all information about users only for admin.
3.2.2.2. Order Management

FR1: The system must allow the standar user to register for order.
FR2: The system must allow the user to view detail description of product.
FR3: The system must notify the user for available products.
FR4: The system must allow the user to buy product.
FR5: The system should allow the user to cancel order.
FR6: The system must show all orders to admin.
FR7: The system must show user to show information about their orders.
FR8: The system should allow to buy products only NGO accounts and standard users.
FR9: The system must view order informations.
3.2.2.3. Products Management

FR1: The system must record information about every product.
FR2: The system can allow to upload image of product.
FR3: The system should queue products by uploading time.
FR4: The system must update products availability for order.
FR5: The system must allow to create products only for private users.
FR6: The system must send create request for product to admin.
FR7: The system must allow to delete product only for private user, NGO and admin.
FR8: The system must view to available products.

3.2.2.4 Activity Management

FR1: The system can accept multiple activities on same day.
FR2: The system must schedule the all activities day by day.
FR3: The system must view activity time.
FR4: The system must only allows admin and NGOs to update activities.
FR5: The system must allow to create activities only for NGOs.
FR6: The system must allow to create activities only for NGO account.
FR7: The system must allow to delete activity only for NGO and admin.
3.2.2.5. Donation Management

FR1: The system should only allow standard and private users to donate to the institution of their choice.
FR2: The system must allow to create donation packet only for admin.
3.2.2.6. Approval Management

FR1: When a new user is registered, system must sen it to the admin approval. 
FR2: The system must send new products to admin approval.
FR3: The system must send product updates to admin approval.
FR4: The system must allow approvement function only for admin.
FR5: The system must allow to update product only private user and admin.



3.2.3. Non-Functional Requirements

3.2.3.1. Performance Requirements

NFR1: The system should support a large number of users at the same time when used in the real time.
NFR2: The system must generate HTML pages no more than 10 seconds.
NFR3: The system must response to queries no longer than 6 seconds.
NFR4: The system should display confirmation messages to users for 3 seconds after user submit information.
3.2.3.2. Security Requirements

NFR1: The system provides username and password to prevent the system from unauthorized access.
NFR2: The system must do all network transactions that involve financial information or personally identifiable information shall be encrypted.
NFR3: The system to allow user should be required to log in to the OtizArt System for all operation except viewing products.
3.2.3.3. Availability

NFR1: The system should always be available for access at 24 hours, 7 days a week. Also in the occurrence of any major system malfunctioning, the system should be available in 1 to 2 working days, so that business process is not severely affected.
3.2.3.4. Usability

NFR1: The system provides a help and support menu in interfaces for the user to interact with the system.
NFR2: The user can use the system by reading help and support.
3.2.3.5. Database Requirements

The Entity Relationship Diagram of the OtizART System can be seen as in the Figure 7. Laravel makes interacting with databases extremely simple accross a variety of database backends using either raw SQL, the fluent query builder, and the Eloquent ORM. Currently, Laravel supports MySQL. Because of Laravel's default property, the ER diagram is in this state. The “posts” table is used to create activity. Migrations are like version control for database, allowing to easily modify and share the application’s database schema. The “migrations” table is the table that laravel creates by default. [10]

 
Figure 7 : ER Diagram






4.Design

4.1 Software Methodology
In this project, waterfall software development methodology is used. The waterfall model describes a development method that is linear and sequential. Waterfall development has distinct goals for each phase of development. Once a phase of development is completed, the development proceeds to the next phase and there is no turning back. [10]
The advantage of waterfall development is that it allows for departmentalization and managerial control. A schedule can be set with deadlines for each stage of development and a product can proceed through the development process like a car in a carwash, and theoretically, be delivered on time. Development moves from concept, through design, implementation, testing, installation, troubleshooting, and ends up at operation and maintenance. Each phase of development proceeds in strict order, without any overlapping or iterative steps. Another positive side of a waterfall approach is that can be applicable by inexperienced teams.
In prototyping software development approach, as it enables to understand requirements at an early stage of development. It helps get valuable feedback from the supervisor and helps to understand about what exactly is expected from the product under development.
The incremental build model is a method of software development where the model is designed, implemented and tested incrementally (a little more is added each time) until the product is finished. It involves both development and maintenance. The product is defined as finished when it satisfies all of its requirements. This model combines the elements of the waterfall model with the iterative philosophy of prototyping. The Incremental Approach uses a set number of steps and development goes from start to finish in a linear path of progression.
Since this project has clear objectives and solutions, waterfall development methodology is the best fit for this project. During the development process, every step is done only once. Because of this choice, team should be careful about doing things right and should avoid mistakes as much as they can.

4.2 System Architecture Diagram

In this section of the report, there is a detailed system architecture diagram to show the necessary system components and their relationships. In figure 8 explains that which system functions indicate which database table is connected. Users (standard, private, NGO) when connected to the OtizART system, the system architecture functions as shown in the figure 8. The transaction takes place in the relevant database if the user is performing a process with which functionality.

 Figure 8 : System Architecture Diagram
Components and Parts:
-	Web Servers
-	Database


4.3 Collaboration Diagrams 

4.3.1 Users Registration

 
Figure 9: Users Registration Collaboration Diagram

In Figure 9, there is an users’ registrations process. This Figure is about communication between objects of the system. When user want to register to the OtizArt, they have to choose user type as NGO, Private or Standard User. After the selection of the type, they can go to home page. System gets necessary information from user class and uses it for registration.










4.3.2 Users Login

 
Figure 10: Users Login Collaboration Diagram

In Figure 10, there is an users’ login process. When users want to login to OtizArt, they will fill the necessary informations as e-mail and password. After this step, they can go to home page as login. System gets necessary information from user class and uses it for login.









4.3.3 Buy Product 

 
Figure 11: Buy Product Collaboration Diagram

In Figure 11, there is buying product process for standard user. When the user want to buy one or more product, they need to have standard user account. This user have to communicate with these objects. 










4.3.4 Add Product

 
Figure 12: Add Product Collaboration Diagram

In Figure 12, there is adding product process for private user. When the user want to add one or more product, they need to have a private user account. This user have to communicate with these objects.










4.3.5 Donation


 
Figure 13: Donation Collaboration Diagram

In Figure 13, there is a donation process for all users. When they want to donate for a NGO or NGO’s activity they can select donation packages types and support them. These objects have to communicate each other.








4.3.6 NGO Add Activity

 
Figure 14: NGO Add Activity Collaboration Diagram

In Figure 14, there is adding activity process for NGO. When the NGO want to add any activity, they can add any option to support other activities as financially. If not, they can just add an activity without any conditions. These objects have to communicate each other.









4.3.7 NGO Delete Activity


 
Figure 15: NGO Delete Activity Collaboration Diagram

In Figure 15, there is deleting activity process for NGO. 











4.3.8 NGO Update Activity

 
Figure 16: NGO Update Activity Collaboration Diagram

In Figure 10, there is updating activity process for NGO. When the NGO want to update their activities, they are free to update it as their needs. 










4.4 Deployment Diagram


 

Figure 17 : Deployment Diagram

In Figure 17, there are 4 main parts as Client Tier, Web Tier, Application Tier and Data Tier. Client Tier can connect to Web Tier by using web browser in the user’s computer. After that, user can connect to user interface. Web Tier is stands there for being a web server. User can only reach the system with this Web Tier. Application Tier is the real part of the OtizArt System. It includes web server interface to provide communication between client and system business logic layer. Business logic layer is also stands for control every activity of the system. It is also connected with Data Access Layer. This layer provides to users to reach products, activities, donations and other functionalities on the system. System provides an interface to user for accessing purposes. In addition, at this tier the system will provide to control the interactions and authorities. Data Tier records the users’ information and the functions that the system offers. Data Tier records detailed informations about activities, products and donation packages of the OtizArt System. 





4.5 Class Diagram


 
Figure 18: Class Diagram

In Figure 18, there are classes of the OtizArt System. There are seven main classes and two sub – classes. Their functions and attributes are defined as well and their relations. The NGO 


is actually a user type, but it was evaluated as a separate main class because some variables and methods found on the NGO class were different.
4.6 User Interface Designs
4.6.1 Main Page of the OtizART

 
Figure 19: OtizArt Main Page 1

In Figure 19, this is the main page where users can access the OtizART system from the web page. The logo is prepared with heart pieces composed of jigsaw pieces from Adobe Photoshop CC.









 
Figure 20: OtizArt Main Page 2

In Figure 20, When users scroll down through the web page,  the main page displays these contents. There is a general information about the system, links to products, actvities and donation packages. 
 
Figure 21: OtizArt Main Page 3

Figure 21 is the content on the main page. Detailed information about autism can be reached from here. There is also a brief description of why users should use this system.

 
Figure 22: OtizArt Main Page 4

In Figure 22, there are explanations about what the OtizART system gives to children with autism.















 
Figure 23: OtizArt Main Page 5

This main page has a navbar that includes some sections as products, activities, donations, time based donations, contact, about us, register, login, search and help & support. In the middle of the main page, there are three options to see some details about products, activities and donations. After that, there are some important informations about autism spektrum disorders and the advantages of the OtizART. End of the main page as shown in Figure 23, there is a footer that includes some informations about OtizART and “up” option to go back to start of the main page.









4.6.2 Registration Page of the OtizArt

 
Figure 24 : OtizArt Registration Page for All Users

In Figure 24, there is registration page has three options for the visitors as standard user, private user and NGO user. When click the “Üye Ol” button, system directs the registration form to the fill screen.

 
Figure 25: OtizArt Registration Page for All Users 2

In figure 25, there is a table summarizing the authorizations of the user types just below the registration page.





 
Figure 26: OtizArt Registration Page All User Details

In Figure 26, all sections has “Details” option for visitor to read informations and select true type of user. For example, NGO informations after clicked the “Detaylı Bilgi ” button.













4.6.3 Registration Page for Standard and Private User

 
Figure 27: OtizArt Standard User Registration Page

 Figure 28 : OtizArt Private User Registration Page

 Figure 29 : OtizArt NGO User Registration Page
In Figure 27, 28, 29, show the registration form of all user types. 

4.6.4 Login Page for All Users and Visitors

 
Figure 30 : OtizArt Login Page 



In Figure 30, there is a login page for all of the users. Three type users of the system will use same page to login. However, there are some difference between private – standard users and NGO. 
4.6.5 Products Page

 
Figure 31 : OtizArt Products Page 

In Figure 31, there is a product page to show all products of the website to users. They can view or buy any products on this page. All products will be listed according to their necessary informations (Product title, description and cover image).









4.6.6 Add, Delete and Update Product for Private Users and NGO

 
Figure 32 : OtizArt Delete-Update Product Page 

In Figure 32, Private User and NGO can delete and update the product on the products page with using these buttons. 













 
Figure 33: OtizArt Management Panel for Adding Product

In Figure 33, there is a drop-down menu which includes Management Panel for creating product/activities.

 
Figure 34: OtizArt Management Panel 


In Figure 34, shows the products that user has already presented to the exhibition.


 
Figure 35: OtizArt Product Form/Product Details

 
Figure 36: OtizArt Product Form Request to Administration

In Figure 35 and 36, there is a product form page in order to add, update or delete products to the websites. There is a progress bar on the page and it will provide users to know and see that which step they are in. If the private user and NGO can fill the product form successfuly, request will sent to administration in order to approve. After the approval, product will be listed on the product page by administration. 





4.6.7 Activities

 
Figure 37: OtizArt Activities Page

In Figure 37, there is a activities page. User can also search for activities by city on this page.

 
Figure 38: OtizArt Activities Form
In Figure 38, there is a form about creating activities. This page consist of activities name, description of activities and city.




4.6.8 Payment Page

 
Figure 39: OtizArt Payment Page 1

 
Figure 40: OtizArt Payment Page 2




In Figure 39 and 40, there is a page for payment for products and donations. They will use the same page in order to purchase any product or any donation packages. 
 
Figure 41: OtizArt Payment Page/ Success Page
In Figure 41, shows the next page after the succesful payment process.














4.6.9 Donation Packages

 
Figure 42: OtizArt Donations Page

In Figure 42, there are four donation packages in order to donate for some activities to support their events. These donation packages have constant value. Following figures 43,44,45,46 show that donationg packages type.
 
Figure 43: OtizArt Donation Package#1 




 
Figure 44: OtizArt Donation Package#2 

 
Figure 45: OtizArt Donation Package#3



 
Figure 46: OtizArt Donation Package#4
















4.6.10 Time Based Donation Packages

 
Figure 47: OtizArt Time Based Donation Package
Figure 47 has a form for NGOs to create time based donations. Activities name, description, start date, end date, target money to be collected and a image fields on this form. 

 

Figure 48: OtizArt Time Based Donation Package Details
Figure 48 shows the start and end date of the activity, the remaining days, the amount of donations collected and the amount of donations expected. 




4.6.11 About Us Page

 
Figure 49: OtizArt About Us Page 1
As shown in Figure 49, detailed information about this project is included.














 
Figure 50 : OtizArt About Us Page 2
Figure 50 contains information from the developers of the project.












4.6.12 Contact Page

 
Figure 51: OtizArt Contact Page
Figure 51 contains the content of the contact page. Contact information is included here.











4.6.13 Help & Support Page and User Manuals
 
Figure 52: OtizArt Help & Support Page 1
Figure 52 has an image of the help and support page on the website. Users can get information about popular questions, return and cancellation, cargo and order issues here.	
 
Figure 53 : OtizArt Help & Support Page 2

Figure 53 shows the popular questions and answers on the help and support page. Here is also the contact information available to users.
 
Figure 54: OtizArt User Manuals Section
Figure 54 contains user manuals. There is helpful content for the user to perform his / her actions.
 
Figure 55: OtizArt Products User Manual
In figure 55 there is a content called products user manual.






 
Figure 56: OtizArt Donation Packages User Manual
Figure 56 includes the user manual for donation packages. There are directions for the user to donate comfortably.

 
Figure 57: OtizArt Donations User Manual
Figure 57 shows an activity creation guide.






 
Figure 58: OtizArt Registration and Login User Manual
Figure 58 shows the operation manual for the registration process and the login process. The steps here help users become members and log in.
















5.	Implementation and Testing

5.1	Implementation

This section of the report describes details implementation of OtizART project. The implementation of this project was completed using with PHP5, PHP Laravel Framework, JavaScript, jQuery, Json, phpMyAdmin, MySQL, HTML5, Apache Server. [11] The primary purpose of the platform is to work in full compliance with current web browsers. The project's interface is to provide the works of children with autism and the activities and donation packages of NGOs.The implementation of modules in the following sections of the report explains in detail.
XAMPP Control Panel v3.2.2 is used for all operations. Figure 59 shows the web and MySQL services on the XAMPP control panel. Details are described below:

 
Figure 59 : XAMPP Control Panel


Home Page
The main page of the OtizART, is the enrty point for all other pages contained in the web page. As their own authorization, users will perform their process here. Operations such as purchasing products, adding activities and making donations will be realized here.
Details
The main page was developed in PHP5, HTML5, CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. This page contains links to other pages. The main page also contains detail information about the project and link to help and support page. The page has a menu on the top that contains products, donation packages, donation with time, about, activities, contact, sign in and register. Users can perform their transactions by clicking on the links here.
The main screen contains all the html and css codes that make up the site's appearance. The basic elements used in the design of the site have references and links. For details of codes see Resources\ views\pages\index.blade.php on the given CD and GitHub.
Pages-Controller
The purpose of the controls is to provide general navigation control within the site. To present the models in the system to the user in the right way. For details of codes see app\http\Controllers\PagesController.php on the given CD and GitHub.
Login and Register Page
This page allows users to enter the system according to the type of user they want to register (NGO, standard, private). Users who successfully complete the registration process can log in the system. In addition, only private user requests require admin approval. In the given Flowchart 60, the system how will visualize login and register process.




 
Figure 60 : FlowChart of Login and Registration Page
Details
The login and register page is developed in PHP5, HTML5, CSS with Laravel Framework. In this section XAMPP connects to the database on the local server, all data is selected and added to this section.  In registration page, user types are described in details.


Error Handling
If this module is not available, the system tries to re-load the page. At the registration stage, the user is prompted for an e-mail address that is not registered in the system. The system gives warning if you have one. A valid e-mail address is also queried. The user will be prompted for a password of at least 6 digits. Password must be confirmed at the bottom field. If these passwords are not compatible with each other, the system gives a warning. At users’ login stage, the system checks the e-mail address that the users receives. If the received address is not valid or not registered, system gives warning.
Login and Register Controllers
This step contains 5 controllers. Choose Registration Type Controller, NGO Registration Controller, Private Registration Controller, Standard Registration Controller, Login Controller.
ChooseRegistrationTypeController
The purpose of this controller is to select the user according to the type of user they want and direct them to the relevant registration page. For details of codes see App\Http\Controllers\ChooseRegistrationTypeController.php on the given CD and GitHub.
StandardRegistrationController
The purpose of this controller is to create a user with limited authorizations. Keeps the user's name, email and password. It transfers these records to the database. And sets the user type as standard. After the registration process, it is directed to the main page with logged in the system. For details of codes see App\Http\Controllers\StandardRegistrationController.php on the given CD and GitHub.
PrivateRegistrationController
The purpose of this controller is to create a user with limited authorizations. Keeps the user's name, email, password and SSN. It transfers these records to the database. And sets the user type as private. After the registration process, it is directed to the admin approval phase. The user is redirected to the main page but cannot use his / her authority until approved by admin. 

For details of codes see App\Http\Controllers\PrivateRegistrationController.php on the given CD and GitHub.
NgoRegistrationController
The purpose of this controller is to create a user with limited authorizations. Keeps the user's name, email, password, address, NGO id. It transfers these records to the database. And sets the user type as NGO. After the registration process, it is directed to the main page with logged in the system. For details of codes see; 
App\Http\Controllers\NgoRegistrationController.php on the given CD and GitHub.
LoginController
This controller handles authenticating users for the application and redirecting them to the system's home screen. The controller uses a trait to conveniently provide its functionality to the system's application. For details of codes see ;
App\Http\Controllers\Auth\LoginController.php on the given CD and GitHub.
Dashboard Page
This page is a management panel that users can access after logged in. A customized management panel is available for each user type. There is no authorization for standard users. Private users can access the products they added before. Adding new products process is also redirected from this page. There are 3 different authorizations for the organization accounts. These authorizations are to add new products, to create new activities, to organize a timed donation campaign. In this page, user approval and product approval procedures are available for Admin.
Details
This page is developed using HTML5, PHP5 and CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. This page contains referrals for transactions that can be made according to user types.


Dashboard Controller
If the user has logged in, it shows its own activities and products. There is a confirmation panel for all users, products and activities on the site for Admin. Provides the opportunity to approve the step if appropriate. For details of codes see ;
App\Http\Controllers\DashboardController.php on the given CD and GitHub.
User, Product and Post Confirmation Controllers
These 3 controllers show registered user to admin and also show activities and products they have uploaded by users. If Admin changes approval status of users, products and activities, controller will change “confirmed” attribute at database. For details of codes see;
 App\Http\Controllers\UserConfirmationController.php, App\Http\Controllers\PostsConfirmationController.php, App\Http\Controllers\ProductsConfirmationController.php on the given CD and GitHub.
Update and Delete Controllers
These 2 controllers show registered user to admin. If the admin finds a user unsuitable for ethical situations, the admin can delete the user account in the UserDeleteController with the destroy function. If user make changes to their account information, the system does this with the edit function in the PrivateUserUpdateController. As a result of this operation, the user's “confirmed” attribute changes and sends it back to the admin panel for confirmation. For details of codes see
App\Http\Controllers\UserDeleteController.php.
App\Http\Controllers\PrivateUserUpdateController.php on the given CD and GitHub.
Error Handling
Users cannot change their email addresses. Cannot make any changes except name and password.



Product Page
The purpose of this page is to show the product details which is uploaded by private and NGO to other users that are approved products by admin and to direct them to the sales page if they wish.
Product Add Page
The purpose of this model is to add the products of private and NGO users to the system. On this page the system displays the product name, description to the user and, if desired, the image upload screen related to the product. It redirects the taken information to the database through ProductConroller.php. In the given Flowchart 61 visualize to adding product on the system.















 
Figure 61 : FlowChart of Product Page
Details
These pages are developed using HTML5, PHP5 and CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. The page contains products sorted by upload date of users. Shows indicates who belongs to the 

products. Gives information if there has been any change on the product. If there is no approved products, the system will give information to users. For details of codes see Resources\views\products\ on the given CD and GitHub. This file contains, create, edit, show and index models for products.
Error Handling
The title and body field is required in this step, if user does not fill this information, system will give warning.
Products Controller
The purpose of this controller is to add products by the authorized users, keep the information required for the product and send them to the database. For details of codes see App\Http\Controllers\ProductsController.php on the given CD and GitHub.
Products Confirmation Controller
The purpose of this controller is to change the “confirmed” attribute in the database of the products that admin considers appropriate. For details of codes see;
 App\Http\Controllers\ProductsConfirmationController.php on the given CD and GitHub.
Activities Page
The purpose of this page is to show the activity details which is uploaded by NGO to other users. If there is no activity, the system informs the user that there is no activity. In addition, the system allows the user to search for activity according to the city they want.








 Figure 62 : FlowChart of Activities Page


Details
This page is developed using HTML5, PHP5 and CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. This page contains activities sorted by upload date of users. The system indicates to the user which NGO the activity belongs to.  For details of codes see Resources\views\post\ on the given CD and GitHub. This file contains, create, edit, show and index models for products.
Error Handling
The title, body and city field is required in this step, if user does not fill this information, system will give warning.
Post Controller
The purpose of this controller is to create, view and edit activities by the authorized users, keep the information required for the activities and send them to the database. For details of codes see App\Http\Controllers\PostController.php on the given CD and GitHub.
Post Confirmation Controller
The purpose of this controller is to change the “confirmed” attribute in the database of the activities that admin considers appropriate. For details of codes see;
App\Http\Controllers\PostsConfirmationController.php on the given CD and GitHub.
Donation Packages
There are 4 donation package types by default in the system. Registered users can make donations by selecting the institution they want over the package they choose. After clicking on the donation button, they can make payments by means of the PaymentsController. In the given FlowChart 63 donation process visualized.




 
Figure 63 : FlowChart of Donation Packages
Details
This page is developed using HTML5, PHP5 and CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. After clicking the donate button, price, name, surname, phone number, email, address, city, ZIP, credit card, expiration date, card name, cvv. This fields are mandatory. The retention of the information has been prepared in accordance with the payment systems APIs.

Error Handling
If any of the required fields are left blank, the system sends an error message to the user.
Payments Controller
This controller is to include price, name, surname, phone number, email, address, city, zip, credit card, expiration date, card name, cvv and also an id to indicate what the amount is to be paid. Stores the information in the database. If users receive a product from the system, the “sold” attribute of the product changes. For details of codes see;
 App\Http\Controllers\PaymentsController.php on the given CD and GitHub.
Timed Donation Page
On this page, the system displays the time request packets generated by NGOs to the users. When clicking the details button, the system will show packet’s information, start date, end date, expected donation and current donations.
Details
This page is developed using HTML5, PHP5 and CSS. In this section XAMPP connects to the database on the local server, all data is selected and added to this section. The system receives the title, body, cover image, start date, end date and expected donation information from the authorized user. Saves this information to the database. System users can donate any amount they want via the PaymentsController, if they want to donate. The system also shows users the amount of donations and the remaining day time. If the expected amount of donations is reached or the given day expires, the time disables the system donation feature. If users want to see their donations, they can see the donations they made in the account settings tab in the navigation bar.
Donate Controller
The purpose of this controller is to list the timed donations, to direct the creation of the package and to send the information to the database about the NGO that the package is created. Also delete the package if desired. For details of codes see;
App\Http\Controllers\DonateController.php on the given CD and GitHub.

Donation Event Controller
The purpose of this controller is responsible for requesting the user the information necessary to create the package. It also sends this information to the database. For details of codes see App\Http\Controllers\DonationEventController.php on the given CD and GitHub.
About Page
This page is developed using HTML5, PHP5 and CSS. The system gives users detailed information about the site. For details of codes see;
Resource\views\pages\about.blade.php on the given CD and GitHub.
Contact Page
This page is developed using HTML5, PHP5 and CSS. The system gives users detailed contact information about the site. Information about developers can also be found here. For details of codes see Resource\views\pages\contact.blade.php on the given CD and GitHub.
Help and Support Page
This page is developed using HTML5, PHP5 and CSS. This page can be accessed from the user menu. Here, show the general usage scenarios in the system and the solutions produced for the problems that may arise. For details of codes see; 
Resource\views\pages\help.blade.php on the given CD and GitHub.
Routes
In this part of the system, the restrictions and authorizations that users can reach are set. In addition, all directions within the site are performed in this section. For details of codes see route\web.php on the given CD and GitHub.





5.2	Test

The purpose of this test plan and procedure is to establish the overall approach, testing sequence, and specific tests to be conducted to demonstrate successful operation of the OtizART prototype.
The main aim of the OtizART is providing easy to use, reliable, security and high performance software to users. Following tests are made to test these two properties.
5.2.1	Test Plan

Testing Approach
OtizART is designed and implemented to have high performance, be reliable, secure and easy to us. To test these functions, following software testing types are used:
-	To test usability, usability tests are applied.
-	To test performance, software performance tests are applied.
-	To test reliability, software reliability tests are applied.
-	To test security, software security tests are applied.
-	Other tests are made to test some small units of the system.
All tests are performed in OtizART’s own environment, localhost, hotspot, Raspberry Pi and web browsers. Visual Studio Code is used as environment. The project was developed using the Web server and MySQL service on XAMPP. Also test performed on the  Servers will be transferred to Raspberry pi and a hotspot environment will be established and the system will be provided. Tests were conducted in these environments. Some tests required people who are not member of the project team. Others tests are done by project team. Detailed information, test procedures and results are explained in the following parts.




Identification of Tests
In this section, list of tests and test cases are given in Table 5.2.1
Table 5.2.1 Identification of tests
Category ID	Description	Test Case	Description	Objective


1	
















Usability test/
Hallway method	1.1
	Enter to the OtizART system	Enter to the OtizART web page
		1.2	Login to system	Enter system using predefined e-mail and password as private user or NGO
		1.3	Go to the OtizART Management Panel	For adding new product/activity
		1.4	Add Products/Activities	Fill out the necessary information, if user type is private, write the product name, product description, if user type is NGO, write the activities title, body and city.
		1.5	Add Image	Adding relevant image about the product/activity
		1.6	Submit	Enter the submit button for adding the product/activity
		1.7	Approving a product via Admin account	Go to the Admin management panel. If the product/activity is suitable, the admin will approve and be published on the website. 
		1.8	View newly added product/activity	If the product/activity is approved, view this product/activity the product/activity page.


2	



Performance test	2.1	Database transactions	Calculate database transaction times
		2.2	System load	Observe system behaviour 15 users connected at the same time 
		2.3	Form generation	Calculate form generation time
		2.4	Pages transition	Delay time to pass another pages
		2.5	Website	Calculate execution time of OtizART website


3	
Reliability test	3.1	Check the failures	Check and calculate time for any failures








4	







Security test	4.1	Password Cracking

	Guess a username/password or some password cracker tool
		4.2	URL Manipulation 	Tester check URL Manipulation through HTTP GET methods
		4.3	SQL Injection	Tester check to inserting SQL statements through web application

Test Schedule
In this part, testing schedule is given in Table 5.2.2.
Table 5.2.2 Test Schedule
Duration
(Hours : Minutes)	Test Objective	Test Event	Dependencies	Comments
00:45	Usability test/Hallway method	1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8	1.7	5 people will test OtizART.
00:20	Database 
transaction	2.1	None	10 calculation will be made.
00:30	System load	2.2	None	15 users will use OtizART at the same time.
00:15	Form generation	2.3	2.1, 2.2	Generate 10 consecutive forms and calculate generation time 
00:10	Pages Transition	2.4	2.2	All transition between the pages and calculate mean time
00:15	Website 	2.5	2.1, 2.2	Website will be entered 30 times and calculate each execution time
4:00	Reliability testing	3.1	None	System will be used continuously for 4 hours and will wait for any failure
00:20	Password Cracking	4.1	None	Guess and try to login with e-mail and password of users
00:15	URL Manipulation	4.2	None	Test URL manipulation using HTTP GET method
00:30	SQL Injection	4.3	None	Inserting SQL statements and observe the system

Fault Reporting and Data Recording 
Tests results are kept in table formats with their special values (ms, sec etc.)
Resource Requirements
Resources used in testing phase is listed below:
Hardware requirements: PCs, mobile phones and tablets with access Hotspot, stop watch
Software requirements: Web Server, XAMPP, Visual Code, Web Browsers.
Document requirements: Test documentation
People requirements: 5 random people to perform Hallway Testing technique.


Test Environment
Tests are performend on Windows platform, mobile phones and tablets on web browsers. Tested persons are selected students at Atılım University. Testers performed tests on PCs, tablets and mobile phones.
Test Responsibilities
When applying tests using Hallway Testing techniques to obtain answers. Realistic scenarios are created and 5 different people selected for these scenarios. After that, calculated average completion time and compared with expected results of the test. Performance, reliability and safety tests were performed. System behaviors were observed as a result of these applications.
5.2.2	Test Procedures

In this part contains expected and achieved results, testing procedures and the purpose of the test.
Usability Test / Hallway Method
Hallway Testing methodology was used. This methodology is generally used for usability testing.[12] 5 6 people are required in this test method. Whether or not the scenarios were successful.
Here is the scenario :
-	Go to the OtizART web page.
-	Log in with predefined e-mail-password.
-	Go to the OtizART Management Panel for adding a new product.
-	Fill out the necessary information.
-	Add images if user wants.
-	Approving a product via Admin account.
-	View newly added product on website.
This scenario for adding new products in OtizART sytem. The same scenario can be applied for adding new activity and timed donation with logged in NGO. 5 people tried to perform this task list using in OtizART system.

Test Case 1.1 – Enter to the OtizART system
Test Description 
This test aims at recording “Enter to the OtizART system” task completion and/or whether user can complete task or not.
Initialization 
-	Web Server started in localhost. 
-	Enter to the OtizART web page via web browser.(localhost:8000)
Test Inputs
None
Test Procedure
-	Give tester a PC.
-	Open the browser and enter the OtizART web page. (localhost:8000)
-	The functionality of the home page was tested according to the time.
-	Record time.
Expected Test Results
-	Test subject can successfully surf at home page (Pass/Fail)
-	Subject can enter the web page under 3 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully entered in website. (Pass)
-	Test subjects could be able to entered in to the website in average 1.2 seconds (Pass)
Test Case 1.2 – Login to system
Test Description
This test aims at recording “login” task completion and/or whether user can complete task or not.


Initialization 
-	Enter to the OtizART web page via web browser.(localhost:8000)
-	Go to the Login page. (E-mail:private@OtizART.com -password:123456)
Test Inputs
E-mail and password
Test Procedure
-	Give tester a PC.
-	Open the browser and enter the OtizART web page. (localhost:8000)
-	The functionality of the login page was tested according to the time.
-	Record time.
Expected Test Results
-	Test subject can successfully logged in. (Pass/Fail)
-	User can be logged the system under 5 seconds. (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully logged in website. (Pass)
-	Test subjects could be able to logged in to the website in average 3.87 seconds (Pass)
Test Case 1.3 – Go to the OtizART Management Panel
Test Description
This test aims at recording go to the ”Management Panel” task completion and/or whether user can complete task or not.
Initialization 
-	Go to the Login page. (E-mail:private@OtizART.com -password:123456)
-	Enter the User Management Panel
Test Inputs
None

Test Procedure
-	Come till the end of case 1.2
-	Say “start” to user and record the process using a stopwatch.
-	Record time.
Expected Test Results
-	Test user can successfully entered. (Pass/Fail)
-	Subject can enter to the management panel under 2 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully entered. (Pass)
-	Test subjects could be able to logged in to the website in average 1.92 seconds (Pass)
Test Case 1.4 – Add Products
Test Description
This test aims at recording ”add product” task completion and/or whether user can complete task or not.
Initialization 
-	Enter the User Management Panel
-	Click the Add Product button.
Test Inputs
Product name, Product description
Test Procedure
-	Come till the end of case 1.3
-	Say “start” to user and record the process using a stopwatch.
-	Record time.
Expected Test Results
-	Test subject can successfully add a new product to the system. (Pass/Fail)
-	Subject could be able to add under 90 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully add a new product to the system. (Pass)
-	Test subjects could be able to add a new product to the system in average 75 seconds (Pass)
Test Case 1.5 – Add Image
Test Description
This test aims at recording ”add image” task completion and/or whether user can complete task or not.
Initialization 
-	Click the Add Product button.
-	Fill required sections.
Test Inputs
Test image
Test Procedure
-	Come till the end of case 1.4
-	Say “start” to user and record the process using a stopwatch.
-	Record time.
Expected Test Results
-	Test subject can successfully add image to product. (Pass/Fail)
-	Subject could be able to add image under 15 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully add image to product. (Pass)
-	Test subjects could be able to add image in average 10 seconds (Pass)



Test Case 1.6 – Submit
Test Description
This test aims at recording ”submit product” task completion and/or whether user can complete task or not.
Initialization 
-	Fill required sections. (product name, description and cover image of product)
Test Inputs
None
Test Procedure
-	Come till the end of case 1.5
-	Say “start” to user and record the process using a stopwatch.
-	Record time.
Expected Test Results
-	Test subject can successfully submit to product. (Pass/Fail)
-	Subject could be able to submit under 2 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully submit to product. (Pass)
-	Test subjects could be able to submit in average 1 seconds (Pass)
Test Case 1.7 – Approving a product via Admin account
Test Description
This test aims at recording ”approving a product via Admin account” task completion and/or whether user can complete task or not.
Initialization 
-	Go to the Login page. (E-mail: admin@admin.com -password:123456)
-	Go to the Management Panel
Test Inputs
-	E-mail and password
-	Product waiting to be approved
Test Procedure
-	Come till the end of case 1.7 (for admin account come till the end of case 1.2)
-	Say “start” to user and record the process using a stopwatch.
-	Record time.
Expected Test Results
-	Test subject can successfully approved to product. (Pass/Fail)
-	Subject could be able to approved under 20 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully submit to product. (Pass)
-	Test subjects could be able to submit in average 15 seconds (Pass)
Test Case 1.7 – View newly added product
Test Description
This test aims at recording ”view newly added product” task completion and/or whether user can complete task or not.
Initialization 
-	Go to the Product Page
Test Inputs
	None
Test Procedure
-	Come till the end of case 1.8 
-	Say “start” to user and record the process using a stopwatch.
-	Record time.

Expected Test Results
-	Test subject can successfully viewed the product page. (Pass/Fail)
-	Subject could be able to viewed under 15 seconds (Pass/Fail)
Actual Test Results
-	All 5 test subjects successfully viewed the product page. (Pass)
-	Test subjects could be able to submit in average 12 seconds (Pass)
Performance Test 
Test Case 2.1 – Database Transactions
Test Description 
This test aims at recording query answer time between database and system.
Initialization 
-	OtizART system is started 
-	Example queries are written to be executed.(Migration-Laravel Framework feature)
Test Inputs 
SQL queries.
Test Procedure 
-	Write sql queries 
-	Execute the query 
-	Record execution time
Expected Test Results 
Execution time is between 40-95 ms. (Pass/Fail)
Actual Test Results 
Average of 20 query answer time is 49 ms. (Pass)


Test Case 2.2 – System Load
Test Description 
This test aims at observing system behavior to large number of users.
Initialization 
-	15 different users are generated
-	The system environment ready to use OtizART.
Test Inputs 
None
Test Procedure 
-	Make all users log in to system 
-	Observe system behaviour
Expected Test Results 
No more delay on the system. (Pass/Fail)
Actual Test Results 
15 users could connect the website almost same time. (Pass)









Test Case 2.3 – Form generation
Test Description 
This test aims at observing system behavior to consecutive form generation
Initialization 
-	Product Seeder has been generated. 
-	Database is ready to transaction.
Test Inputs 
Product Seeder
Test Procedure 
-	Migrate the Product Seeder file
-	Observe system behaviour
Expected Test Results 
No negative effect on the system. (Pass/Fail)
Actual Test Results 
35 products could transacted consequently. (Pass)
Test Case 2.4 – Pages transition
Test Description 
This test aims at calculating delay time between page transition.
Initialization 
-	Web Server ready to serve
-	The system routes has been setted.
Test Inputs 
None

Test Procedure 
-	Record response time of passing the pages.
Expected Test Results 
No delay on system(Pass/Fail).
Actual Test Results 
All users has no delay on the system.(Pass
Test Case 2.5 – Website
Test Description 
This test aims at calculating response time to server.
Initialization 
-	Web Server ready to serve
-	Hotspot is ready
Test Inputs 
None
Test Procedure 
-	Enter the localhost:8000 via web browser
-	Record execution time
Expected Test Results 
Application execution process take less than 2 seconds (Pass/Fail)
Actual Test Results 
Application execution process took 1.5 seconds in average (Pass)



Reliability Test 
Test Case 3.1  – Check the failures
Test Description 
This test aims that system will be used continuously for 4 hours and will wait for any failure.
Initialization
-	Start the system.
Test Inputs 
None 
Test Procedure 
Use OtizART for 4 hours. Note down the system failures and their occurrence times. 
Expected Test Results 
In this test, no specific result is expected. 
Actual Test Results
 For 4 hours, there exists no error.
Security Test 
Test Case 4.1  – Password Cracking
Test Description 
This test aims that guess a username/password or some password cracker tool
Initialization
-	Start the system.
-	Go to login page.


Test Inputs 
-	Trying to random E-mail and password ( Username: test@test.com Password: 123456, Username: test@otizart.com Password:1234567890, Username: admin@otizart.com Password: 1q2w3e, etc.)
Test Procedure 
Trying different inputs on the website for login.
Expected Test Results 
In this test, unauthorized entry is not expected.(Pass/Fail)
Actual Test Results
 There exists no correct trial. (Pass)
Test Case 4.2  – URL Manipulation
Test Description 
This test aims that manipulate the URL with using HTTP GET method.
Initialization
-	Start the system.
Test Inputs 
-	Localhost:8000/Admincontrol
-	Localhost:8000/Management
-	Localhost:8000/DeleteUser
-	Localhost:8000/DeleteUser
-	Localhost:8000/donationEvent/create etc.
Test Procedure 
Trying different URL manipulation on the website.


Expected Test Results 
In this test, URL manipulation is not expected.(Pass/Fail)
Actual Test Results
One URL (Localhost:8000/donationEvent/create) executed but there was no problem to create a security problem.(Pass)
Test Case 4.3  – SQL Injection
Test Description 
This test aims that inserting SQL statements and observe the system
Initialization
-	Start the system.
-	Go to the Login page.
Test Inputs 
SELECT * FROM user LIKE ‘admin’ 
Test Procedure 
Write SELECT * FROM user LIKE ‘admin’ in the Username field
Expected Test Results 
In this test, expecting to no response from any table in the database.(Pass/Fail)
Actual Test Results
In the Laravel Framework used, all forms are submitted as hidden. SQL injection is not allowed, since MySQLi is the current version of SQL.(Pass)




6.	Evaluation
A system was enabled to work on localhost. The system's dynamic and static settings were made. A system development environment suitable for Model View Controller architecture was created.
Problems
-	If the internet connection is lost, the system data cannot fetch the database.
-	The calendar structure does not work in accordance with the rest of the system.
-	The current system does not have a valid domain address. Therefore, the payment system does not do any real work.
Performance
-	 UI transitions are fast enough to be unnoticed, thanks to its PHP Laravel framework.
-	Adding data to the database and displaying the contents is quite fast.
-	System requirements (such as CPU, available memory, available disk space) are low. Therefore it can be played on any computer that has the necessary hardware
Usability
-	When tested, it has been observed that user had little time to adopt to system and started to accomplish tasks in a quick way.
-	UI featured in the system has easy-to-understand icons and clutter free, which also helps to the efficiency of the system.
-	Screens, layouts and iconography presented in the system is consistent.
-	When users perform an incorrect operation, the system gives detailed information about this operation.
Deployment
-	When the hosting service and domain address required for the system are provided, system can be deployed successfully.
-	To use the system, every user should have up to date web browser.


Maintenance
-	All forms sent by the system have APIs that will work exactly as compatible with future added plug-in.
-	When the system is updated, users do not need to make any changes.
Backup & Recovery
-	When users interact with the site, they cannot delete an data in the database and they can only change their data status. Thus, there is no loss of data about the past.
Security
-	All data is stored in the database and only those with authority can access this data.
-	Some important data such as password is kept in the database in encrypted form.
-	Only the user with the admin authority can create by KromoSoft. 
















7.	Impact of the Project & Compliance with the Constraints

7.1	Compliance with the Realistic Constraints
The constraints of the system, such as requirement for high performance and fast loading times, are met when the system is evaluated. Below, on Table 7.1, the summary of those constraints and conditions are given.
Table 7.1 Realistic Constraints & Conditions
Economic Factors	Please specify/explain realistic constraints and conditions (type, use, amount, etc.)

EXPENDITURES
Computer	We have used our personal computers for development and UI Design of the all system.
Other Devices	We have used a Raspberry Pi for hosting.
Peripherals	NA
Internet Connection	NA
Software	For coding: Visual Studio Code was used.
For server: XAMP Control Panel v3.2.2 was used.
Textbook/Magazine/Support Material	Php Laravel Guide.
Human Resources	Our Project team consists of 4 People
Other	NA

FUNDING Sources
University Resources	NA
Project support (SANTEZ, TÜBİTAK, and so on)	NA
Support by the Industry 	NA
Self-funded	Php Laravel Development Projects
Other sources	NA
	
OTHER CONSTRAINTS	
Memory	All informations were saved on Database in the tables.
Runtime efficiency	NA
	
MANAGERIAL	
Schedule (time)	The platform was expected to be completed in 14 weeks, where 12 weeks were needed to actually complete the project.

7.2	Impact of the Project
The project is expected to have a positive impact on the autism indirectly by providing speed, efficiency and usability. It does not impose any cost for its maintenance either. 
Table 7.2 Impact Assessment Report
Professional/Ethical Issues	Please specify/explain (existence of items, violation of items, awareness about items)

ETHICS/IT Law	Are there any applicable laws or legislation that will be relevant to the use and/or the construction of the system you are building?  How have you addressed them?
Copyright in copying multimedia (sound, video, text)	NA
Use of licenced software	For the construction of the project, some licensed software and some open source frameworks were used. The product itself is free and does not require any license-fee for its use.
Data Privacy  	The data stored in the system is forbidden to be used by 3rd party, as stated by the laws. During the development, no real data was neither accessed nor used. The system will be deployed to the local network of the organization or online network of the organization. Thus, only system admin can reach those data.
Use of patented products/ideas	NA
IT Laws  in Turkey (5661 and others)	The software runs in local and does not contain any online action, thus not affected by the obligations of the law.
IT Laws - International	NA
Plagiarism	NA

PROFESSIONAL	Liability/Sustainability Issues – What is the potential for liability either to yourself or your customer or users of the system, if it is misused or has flaws? Financial Impact – Have the financial costs of deploying and supporting the system been fully evaluated for yourself, the customer, users, and society as a whole? 
Sustainability (use of Licenced  and/or opensource code)	The application is based on open source frameworks and the server runs an operating system based on Windows 10, thus there is no licensed code used.
Maintenance	The maintenance and improvements are planned to be done by demand of the user/client.
Liability	In case of a flaw in the code, the liability belongs to the developer team, while in case of misuse, user has the liability for its outcomes, after a log of the system will be checked to determine the source of the error.
Financial impact/Manufacturability	NA
	
SOCIAL/POLITICAL/
ENVIRONMENTAL	Societal Issues – What is the potential for this system to be beneficial or detrimental to society as a whole?  What have you done to address the potentially detrimental use? Are there any side-effects on the environment? Are there any potential political implications of the use of your system? What impact will this system have on the intended user community?  Have you taken steps to safeguard the interests of that community?
Political impact	NA
Impact on health	The system is expected to have a positive impact on autism indirectly, as it will eliminate some problems during education as well as provide efficiency. A control mechanism for the system to protect the ethical values should be provide. This control mechanism must be controlled by admin.
Gambling	NA
Pornography	NA
Equal Access/equity	NA
Environmental impacts (energy, carbon footprint and so on)	NA
Technology acceptance & Human/Business psychology 	The system has an indirect positive impact on technology acceptance by bringing usage of mobile devices into autism field. It increases usage of computerized systems in the field in a more mobile way.
Security issues	NA
	
PROFESSIONAL (CODES, STANDARDS, FRAMEWORKS)	What technical standards are relevant to the software system you have built?  How have you ensured conformance?  These could be government standards, industry standards, or even just conventions that are followed in the market for your system.  Be sure to clearly identify what type of standard you are talking about and who is the relevant authority for the standard.
IEEE	NA
ISO	NA
ANSI	NA
TSE	NA
ITIL/COBIT	NA
OTHER	NA





8.	Conclusion

As a result of this project, it has been shown how to contribute to social innovation, what is important when providing this contribution, how to create effective solutions and how these solutions actually contribute to social life. Social innovation is not the prerogative or privilege of any organizational form or legal structure. Solutions often require the active collaboration of constituents across government, business, and the nonprofit world. Also this project shows what an important role usability has in any software. Our site is developed for different user types. Because various control mechanisms were required for the purpose served by the system. To create these mechanics, a method of development far from complexity had to be chosen. That's why Laravel was selected. In addition, it is also a framework that includes the most successful security elements for this project. With the analysis of requirements and research on the target domain, and feedbacks gathered from the target users with prototyping; all the findings have been carefully considered to avoid those problems and to provide a system with high level of usability, performance and effectiveness. The system has been implemented in a way to meet its constraints as well, while providing a base for future extensibility. Necessary tests on both performance and usability has been done in order to conform to requirements. Evaluation of the system shows the current situation overall such as its performance, reliability, security, maintenance, etc.. The result of our project, it helped us understand the challenges that our users face in real life. We also learned in detail what we should pay attention to when developing a website. 
All system codes, including the report, are available on github and appendix CD. [13]







9.	Appendices

9.1	Appendix 1 Interview with Nilüfer Ertem, Specialist at KOSGEB and Mother of an ASD Child:

Q1:  What is autism spectrum disorders ?
Answer: Autism spectrum disorder is a complex neuro-developmental disorder that emerges from birth or early years of life. Autism is thought to be caused by some nervous system problems that affect the structure or functioning of the brain. The term autism has been used from time to time because of its ease of use for autism spectrum disorder. 
Q2: What is the cause of autism spectrum disorder ?
Answer: Today, it is not known what causes the autism spectrum disorder, but there is evidence that it is genetically based. However, it is not yet known which genes or genes are responsible. There are opinions that environmental factors can also lead to autism. Numerous researches have been carried out on the effects of both genetic basis and environmental factors. Autism has nothing to do with child-rearing or family economic conditions; Therefore, autism spectrum disorder is found in all kinds of society, in different geographies, race and family.
Q3: How can art therapy be applied to children with autism spectrum disorders ?
Answer: Children with this type of disorder can take art theraphy classes to express themselves better and easier. Moreover, these children are highly capable of painting.







9.2	Appendix 2 Interview with Ufuk Timuçin, Coordinator of İlgi Autism Foundation:

Q1: How and by whom is autism diagnosed ?
Answer: Persons who can make a diagnosis are only specialists. The external appearance of children with autism is not different from other children; however, their behavior is different. The diagnosis is made by the experts by observing the child, conducting development tests and asking parents about the child's development. Diagnosis of autism can be made at the age of 12 months. Early diagnosis is important for the start of education.
The experts who can diagnose autism in our country are child mental health specialists and child neurologists.
1.	Child Psychologist
2.	Child Neurologist
Q2: Are there any system requirements that you can recommend to us?
Answer: You can make some changes to the auction system. You can modify trainer type user. For example; shadow teacher, assistant teacher.
By creating corporate membership to the NGOs, it can be provided that they organize and manage their own sales and activities in the OtizArt system.
	









10.	References

Autism Speaks, (2018). Autism Facts and Figures, Retrieved from https://www.autismspeaks.org/autism-facts-and-figures
Otsimo, (2018). Otsimo Main Page, Retrieved from https://otsimo.com/tr/
“LÖSEV”, (2018). “LÖSEV” Main Page, Retrieved from https://www.losev.org.tr/v6
“Türk Kızılayı, (2018). “Türk Kızılayı” Main Page, Retrieved from https://www.kizilay.org.tr/
“Arı Kovanı”, (2018). “Arı Kovanı” Main Page, Retrieved from https://arikovani.com/
“About”, (2018). “Tohum Autism Foundation”, Retrieved from https://www.tohumotizm.org.tr/hakkimizda/
CIA principle, (2018). What is Security Analysis, Retrieve from https://www.doc.ic.ac.uk/~ajs300/security/CIA.htm
"Good-bye, GUI Hello NUI", Halfhill TR., Byte Magazine, 1997, pp. 60-72.
 “Database: Migrations”, (2018). Laravel, Retrieved from https://laravel.com/docs/5.7/migrations#introduction
Summerville, (2016). “The Waterfall Model”, Software Engineering (10th Ed.) pp. 47-49.
Laravel From Scratch, (2017). Traversy Media, Retrieved from https://www.youtube.com/watch?v=EU7PRmCpx-0
“10 Tips for Better Hallway Usability Testing”, (2014). DIGITALGOV, Retrieved from https://digital.gov/2014/02/19/10-tips-for-better-hallway-usability-testing/#
“otizart”, (2018). GitHub, Retrieved from https://github.com/onernemutlu/otizart


